{% extends 'base.html.twig' %}

{% block title %}Kalender - {{ club_name ?? 'Fußballverein' }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.css' rel='stylesheet' />
    <link href='/css/calendar.css' rel='stylesheet' />
{% endblock %}

{% block body %}
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="calendar-container">
                <div class="calendar-header">
                    <h1 class="mb-2">
                        <i class="fas fa-calendar-alt me-3"></i>Vereinskalender
                    </h1>
                    <p class="mb-0 opacity-90">Alle Termine, Spiele und Events im Überblick</p>
                </div>

                <!-- Event Statistics -->
                {% if event_stats is defined %}
                <div class="stats-cards">
                    <div class="stats-card">
                        <div class="stats-number">{{ event_stats.total ?? 0 }}</div>
                        <div class="stats-label">Termine gesamt</div>
                    </div>
                    <div class="stats-card">
                        <div class="stats-number">{{ event_stats.games ?? 0 }}</div>
                        <div class="stats-label">Spiele</div>
                    </div>
                    <div class="stats-card">
                        <div class="stats-number">{{ event_stats.trainings ?? 0 }}</div>
                        <div class="stats-label">Trainings</div>
                    </div>
                    <div class="stats-card">
                        <div class="stats-number">{{ event_stats.meetings ?? 0 }}</div>
                        <div class="stats-label">Termine</div>
                    </div>
                </div>
                {% endif %}

                <!-- Calendar Controls -->
                <div class="calendar-controls">
                    <div class="row align-items-center">
                        <div class="col-xl-6 col-lg-7 col-md-12 mb-3 mb-xl-0">
                            <div class="d-flex gap-2 flex-wrap">
                                {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_TRAINER') %}
                                    <button type="button" class="btn btn-calendar" data-action="add-event">
                                        <i class="fas fa-plus me-2"></i><span class="d-none d-sm-inline">Event hinzufügen</span><span class="d-sm-none">Event</span>
                                    </button>
                                {% endif %}
                                <button type="button" class="btn btn-outline-primary" data-action="today">
                                    <i class="fas fa-calendar-day me-1"></i><span class="d-none d-sm-inline">Heute</span>
                                </button>
                                <button type="button" class="btn btn-outline-secondary" data-action="refresh">
                                    <i class="fas fa-sync-alt me-1"></i><span class="d-none d-sm-inline">Aktualisieren</span>
                                </button>
                            </div>
                        </div>
                        <div class="col-xl-6 col-lg-5 col-md-12">
                            <div class="filter-controls d-flex flex-wrap justify-content-lg-end justify-content-center">
                                <span class="me-2 text-muted fw-bold d-none d-md-inline">Filter:</span>
                                {% for eventType in eventTypes %}
                                    <button type="button" 
                                            class="filter-btn event-type-filter active mb-1" 
                                            data-event-type="{{ eventType.id }}"
                                            data-color="{{ eventType.color }}"
                                            title="{{ eventType.name }}">
                                        <span class="legend-color d-inline-block me-1" data-event-color="{{ eventType.color }}"></span>
                                        <span class="d-none d-lg-inline">{{ eventType.name }}</span>
                                        <span class="d-lg-none">{{ eventType.name|slice(0, 3) }}</span>
                                    </button>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Loading Spinner -->
                <div class="loading-spinner" id="calendarLoading">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Laden...</span>
                    </div>
                    <p class="mt-2 text-muted">Kalender wird geladen...</p>
                </div>

                <!-- Calendar -->
                <div id="calendar"></div>

                <!-- Event Legend -->
                {% if eventTypes is defined and eventTypes|length > 0 %}
                <div class="legend">
                    {% for eventType in eventTypes %}
                        <div class="legend-item">
                            <div class="legend-color" data-event-color="{{ eventType.color }}"></div>
                            <span>{{ eventType.name }}</span>
                        </div>
                    {% endfor %}
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<!-- Event Modal -->
<div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventModalLabel">Event erstellen/bearbeiten</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="eventForm">
                    <input type="hidden" id="eventId">
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="eventTitle" class="form-label">Titel *</label>
                                <input type="text" class="form-control" id="eventTitle" required>
                            </div>
                            
                            <div class="mb-3">
                                <label for="eventType" class="form-label">Event-Typ *</label>
                                <select class="form-control" id="eventType" required>
                                    <option value="">Bitte wählen...</option>
                                    {% for eventType in eventTypes %}
                                        <option value="{{ eventType.id }}" data-is-game="{{ eventType.name == 'Spiel' ? 'true' : 'false' }}">{{ eventType.name }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                            
                            <div class="mb-3">
                                <label for="eventStartDate" class="form-label">Start-Datum *</label>
                                <input type="date" class="form-control" id="eventStartDate" required>
                            </div>
                            
                            <div class="mb-3">
                                <label for="eventStartTime" class="form-label">Start-Zeit</label>
                                <input type="time" class="form-control" id="eventStartTime">
                            </div>
                            
                            <div class="mb-3">
                                <label for="eventEndDate" class="form-label">End-Datum</label>
                                <input type="date" class="form-control" id="eventEndDate">
                            </div>
                            
                            <div class="mb-3">
                                <label for="eventEndTime" class="form-label">End-Zeit</label>
                                <input type="time" class="form-control" id="eventEndTime">
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="eventLocation" class="form-label">Ort</label>
                                <div class="position-relative">
                                    <input type="text" class="form-control" id="eventLocation" placeholder="Ort eingeben oder auswählen..." autocomplete="off">
                                    <div class="position-absolute top-50 end-0 translate-middle-y me-3" id="locationLoading" style="display: none;">
                                        <div class="spinner-border spinner-border-sm text-primary" role="status">
                                            <span class="visually-hidden">Suche...</span>
                                        </div>
                                    </div>
                                    <div class="dropdown-menu position-absolute w-100" id="locationDropdown" style="display: none; top: 100%; left: 0; z-index: 1050;"></div>
                                </div>
                                <input type="hidden" id="eventLocationId">
                            </div>
                            
                            <div class="mb-3">
                                <label for="eventDescription" class="form-label">Beschreibung</label>
                                <textarea class="form-control" id="eventDescription" rows="3"></textarea>
                            </div>
                            
                            <!-- Spiel-spezifische Felder -->
                            <div id="gameFields" style="display: none;">
                                <h6 class="fw-bold text-primary mb-3">Spiel-Details</h6>
                                
                                <div class="mb-3">
                                    <label for="homeTeam" class="form-label">Heim-Team *</label>
                                    <select class="form-control" id="homeTeam">
                                        <option value="">Bitte wählen...</option>
                                        {% for team in teams %}
                                            <option value="{{ team.id }}">{{ team.name }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="awayTeam" class="form-label">Auswärts-Team *</label>
                                    <select class="form-control" id="awayTeam">
                                        <option value="">Bitte wählen...</option>
                                        {% for team in teams %}
                                            <option value="{{ team.id }}">{{ team.name }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                                
                                <div class="mb-3">
                                    <label for="gameType" class="form-label">Spiel-Typ</label>
                                    <select class="form-control" id="gameType">
                                        <option value="">Bitte wählen...</option>
                                        {% for gameType in gameTypes %}
                                            <option value="{{ gameType.id }}">{{ gameType.name }}</option>
                                        {% endfor %}
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abbrechen</button>
                <button type="button" class="btn btn-danger" id="deleteEventBtn" style="display: none;">Löschen</button>
                <button type="button" class="btn btn-primary" id="saveEventBtn">Speichern</button>
            </div>
        </div>
    </div>
</div>

<!-- Event Details Modal -->
<div class="modal fade" id="eventDetailsModal" tabindex="-1" aria-labelledby="eventDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventDetailsModalLabel">Event Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="eventDetailsContent">
                    <!-- Wird dynamisch gefüllt -->
                </div>
                
                <!-- Teilnahme-Sektion -->
                <div id="participationSection" style="display: none;">
                    <hr>
                    <h6 class="fw-bold text-primary mb-3">
                        <i class="fas fa-users me-2"></i>Teilnahme
                    </h6>
                    
                    <!-- Eigene Teilnahme -->
                    <div class="card bg-light mb-3">
                        <div class="card-body">
                            <h6 class="card-title mb-3">Ihre Teilnahme</h6>
                            <div id="participationButtons" class="d-flex gap-2 flex-wrap mb-3">
                                <!-- Buttons werden dynamisch geladen -->
                            </div>
                            <div class="mb-3">
                                <label for="participationNote" class="form-label">Notiz (optional)</label>
                                <textarea class="form-control" id="participationNote" rows="2" placeholder="Zusätzliche Bemerkung..."></textarea>
                            </div>
                            <div id="currentParticipationStatus" class="alert alert-info" style="display: none;">
                                <!-- Aktueller Status wird hier angezeigt -->
                            </div>
                        </div>
                    </div>
                    
                    <!-- Teilnehmerliste -->
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title mb-3">Teilnehmerliste</h6>
                            <div id="participationsList">
                                <div class="text-center">
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Laden...</span>
                                    </div>
                                    <small class="d-block mt-2">Lade Teilnahmen...</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Schließen</button>
                {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_TRAINER') or is_granted('ROLE_SUPER_ADMIN') %}
                    <button type="button" class="btn btn-danger" id="deleteEventFromDetailsBtn" style="display: none;">Löschen</button>
                    <button type="button" class="btn btn-primary" id="editEventBtn">Bearbeiten</button>
                {% endif %}
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js'></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Loading state management
        function showLoading() {
            document.getElementById('calendarLoading')?.classList.add('active');
        }
        
        function hideLoading() {
            document.getElementById('calendarLoading')?.classList.remove('active');
        }

        showLoading();

        // Calendar configuration from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        const date = urlParams.get('date') || new Date().toISOString().slice(0, 10);
        const view = urlParams.get('view') || 'dayGridMonth';
        
        const fullCalendarView = 
            view === 'day' ? 'timeGridDay' :
            view === 'week' ? 'timeGridWeek' :
            view === 'month' ? 'dayGridMonth' :
            'dayGridMonth';

        // Calendar data
        const calendarGameEventTypeId = '{{ calendarGameEventTypeId ?? '' }}';
        const calendarEl = document.getElementById('calendar');
        
        if (!calendarEl) {
            console.error('Calendar element not found');
            hideLoading();
            return;
        }

        // Initialize FullCalendar
        window.calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: fullCalendarView,
            initialDate: date,
            locale: 'de',
            firstDay: 1, // Start week on Monday
            weekNumbers: true,
            weekNumberCalculation: 'ISO',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
            },
            buttonText: {
                today: 'Heute',
                month: 'Monat',
                week: 'Woche',
                day: 'Tag',
                list: 'Liste'
            },
            allDayText: 'Ganztägig',
            noEventsText: 'Keine Termine zu anzeigen',
            events: {
                url: '{{ path('api_calendar_events') }}',
                failure: function(error) {
                    console.error('Error loading calendar events:', error);
                    hideLoading();
                    showNotification('Fehler beim Laden der Kalender-Events', 'error');
                }
            },
            loading: function(isLoading) {
                if (isLoading) {
                    showLoading();
                } else {
                    hideLoading();
                }
            },
            dateClick: function(info) {
                {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_TRAINER') %}
                    window.handleDateClick(info);
                {% endif %}
            },
            eventClick: function(info) {
                // Prevent default navigation
                info.jsEvent.preventDefault();
                window.handleEventClick(info);
            },
            eventDidMount: function(info) {
                // Apply event type styling
                const eventTypeId = info.event.extendedProps.eventTypeId;
                if (eventTypeId && window.eventTypes) {
                    const eventType = window.eventTypes.find(type => type.id == eventTypeId);
                    if (eventType) {
                        info.el.style.backgroundColor = eventType.color;
                        info.el.style.borderColor = eventType.color;
                        
                        // Add hover effects
                        info.el.addEventListener('mouseenter', function() {
                            this.style.opacity = '0.8';
                        });
                        info.el.addEventListener('mouseleave', function() {
                            this.style.opacity = '1';
                        });
                    }
                }
                
                // Add tooltip
                if (info.event.extendedProps.description) {
                    info.el.title = info.event.extendedProps.description;
                }
            },
            eventMouseEnter: function(info) {
                // Enhanced tooltip could be added here
                console.log('Mouse enter event:', info.event.title);
            },
            height: 'auto',
            aspectRatio: 1.35,
            dayMaxEvents: 3,
            moreLinkText: function(num) {
                return `+ ${num} weitere`;
            },
            eventDisplay: 'block',
            displayEventTime: true,
            eventTimeFormat: {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            },
            slotLabelFormat: {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            },
            nowIndicator: true,
            selectable: true,
            selectMirror: true,
            select: function(info) {
                // Handle date range selection
                {% if is_granted('ROLE_ADMIN') or is_granted('ROLE_TRAINER') %}
                    console.log('Date range selected:', info.start, 'to', info.end);
                    window.handleDateClick({
                        dateStr: info.start.toISOString().split('T')[0],
                        endDateStr: info.end.toISOString().split('T')[0]
                    });
                {% endif %}
            },
            // Responsive design
            windowResize: function(view) {
                console.log('Calendar resized to:', view.type);
            }
        });

        // Render calendar
        try {
            window.calendar.render();
            console.log('Calendar rendered successfully');
        } catch (error) {
            console.error('Error rendering calendar:', error);
            hideLoading();
            showNotification('Fehler beim Darstellen des Kalenders', 'error');
        }

        // Make event types globally available
        window.eventTypes = {{ eventTypes|json_encode|raw }};
        
        // Make teams available if provided
        {% if teams is defined %}
        window.teams = {{ teams|json_encode|raw }};
        {% endif %}

        // Set dynamic event colors
        function setDynamicColors() {
            document.querySelectorAll('[data-event-color]').forEach(element => {
                const color = element.dataset.eventColor;
                if (color) {
                    element.style.setProperty('--event-color', color);
                    element.style.backgroundColor = color;
                }
            });
        }
        setDynamicColors();

        // Event delegation for dynamic controls
        document.addEventListener('click', function(e) {
            // Filter toggle
            if (e.target.matches('.event-type-filter') || e.target.closest('.event-type-filter')) {
                const btn = e.target.matches('.event-type-filter') ? e.target : e.target.closest('.event-type-filter');
                btn.classList.toggle('active');
                filterCalendarEvents();
            }
            
            // Today button
            if (e.target.matches('[data-action="today"]') || e.target.closest('[data-action="today"]')) {
                if (window.calendar) {
                    window.calendar.today();
                    showNotification('Zu heute gesprungen', 'info');
                }
            }
            
            // Add event button
            if (e.target.matches('[data-action="add-event"]') || e.target.closest('[data-action="add-event"]')) {
                if (typeof window.handleAddEvent === 'function') {
                    window.handleAddEvent();
                } else {
                    console.warn('Add event handler not loaded yet');
                    showNotification('Event-System wird noch geladen, bitte versuchen Sie es in einem Moment erneut.', 'warning');
                }
            }
            
            // Refresh button
            if (e.target.matches('[data-action="refresh"]') || e.target.closest('[data-action="refresh"]')) {
                if (window.calendar) {
                    showLoading();
                    window.calendar.refetchEvents();
                    showNotification('Kalender aktualisiert', 'success');
                }
            }
        });

        // Filter functionality
        function filterCalendarEvents() {
            const activeFilters = Array.from(document.querySelectorAll('.event-type-filter.active'))
                .map(btn => btn.dataset.eventType);
            
            if (window.calendar) {
                const events = window.calendar.getEvents();
                events.forEach(event => {
                    const eventTypeId = event.extendedProps.eventTypeId;
                    const shouldShow = activeFilters.includes(String(eventTypeId));
                    event.setProp('display', shouldShow ? 'auto' : 'none');
                });
                
                console.log('Filtered events. Active filters:', activeFilters);
            }
        }

        // URL management for navigation
        if (window.calendar) {
            window.calendar.on('datesSet', function(info) {
                const view = info.view.type;
                const date = info.start.toISOString().slice(0, 10);
                
                const viewParam = view === 'dayGridMonth' ? 'month' : 
                                 view === 'timeGridWeek' ? 'week' : 
                                 view === 'timeGridDay' ? 'day' : 
                                 view === 'listWeek' ? 'list' : 'month';
                
                const newUrl = new URL(window.location);
                newUrl.searchParams.set('view', viewParam);
                newUrl.searchParams.set('date', date);
                
                window.history.replaceState({}, '', newUrl);
                console.log('URL updated:', newUrl.toString());
            });
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (!window.calendar) return;
            
            // Ctrl/Cmd + Arrow keys for navigation
            if ((e.ctrlKey || e.metaKey) && !e.shiftKey) {
                switch(e.key) {
                    case 'ArrowLeft':
                        e.preventDefault();
                        window.calendar.prev();
                        break;
                    case 'ArrowRight':
                        e.preventDefault();
                        window.calendar.next();
                        break;
                    case 'Home':
                        e.preventDefault();
                        window.calendar.today();
                        break;
                }
            }
        });

        console.log('Calendar initialization completed');

        // Location Autocomplete
        let locationTimeout = null;
        const locationInput = document.getElementById('eventLocation');
        const locationIdInput = document.getElementById('eventLocationId');
        const locationDropdown = document.getElementById('locationDropdown');
        const locationLoading = document.getElementById('locationLoading');

        locationInput.addEventListener('input', function() {
            const term = this.value.trim();
            
            // Clear previous timeout
            if (locationTimeout) {
                clearTimeout(locationTimeout);
            }
            
            // Hide loading and dropdown
            locationLoading.style.display = 'none';
            locationDropdown.style.display = 'none';
            
            // Reset location ID if input changed
            locationIdInput.value = '';
            
            // Hide dropdown if input is empty
            if (term.length < 2) {
                return;
            }
            
            // Show loading indicator
            locationLoading.style.display = 'block';
            
            // Debounce search
            locationTimeout = setTimeout(() => {
                searchLocations(term);
            }, 300);
        });

        // Hide dropdown when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('#eventLocation') && !e.target.closest('#locationDropdown')) {
                locationDropdown.style.display = 'none';
            }
        });

        function searchLocations(term) {
            fetch(`{{ path('api_calendar_search_locations') }}?term=${encodeURIComponent(term)}`)
                .then(response => response.json())
                .then(locations => {
                    locationLoading.style.display = 'none';
                    showLocationDropdown(locations);
                })
                .catch(error => {
                    console.error('Error searching locations:', error);
                    locationLoading.style.display = 'none';
                    locationDropdown.style.display = 'none';
                    showNotification('Fehler beim Laden der Orte', 'error');
                });
        }

        function showLocationDropdown(locations) {
            if (locations.length === 0) {
                // Zeige "Keine Ergebnisse" Nachricht
                locationDropdown.innerHTML = `
                    <div class="dropdown-item-text text-muted">
                        <i class="fas fa-search me-2"></i>Keine Orte gefunden
                    </div>
                `;
                locationDropdown.style.display = 'block';
                return;
            }

            let html = '';
            locations.forEach(location => {
                const displayText = location.address ? 
                    `${location.name} - ${location.address}${location.city ? ', ' + location.city : ''}` : 
                    location.name;
                
                html += `
                    <a href="#" class="dropdown-item location-option" 
                       data-id="${location.id}" 
                       data-name="${location.name}">
                        <i class="fas fa-map-marker-alt me-2 text-muted"></i>${displayText}
                    </a>
                `;
            });
            
            locationDropdown.innerHTML = html;
            locationDropdown.style.display = 'block';
        }

        // Location selection handler
        document.addEventListener('click', function(e) {
            if (e.target.matches('.location-option')) {
                e.preventDefault();
                const locationId = e.target.dataset.id;
                const locationName = e.target.dataset.name;
                
                locationInput.value = locationName;
                locationIdInput.value = locationId;
                locationDropdown.style.display = 'none';
            }
        });

        // Event Type Change Handler - Spiel-Felder ein/ausblenden
        document.getElementById('eventType').addEventListener('change', function() {
            const gameFields = document.getElementById('gameFields');
            const selectedOption = this.options[this.selectedIndex];
            const isGame = selectedOption.dataset.isGame === 'true';
            
            if (isGame) {
                gameFields.style.display = 'block';
                // Required für Spiel-Felder setzen
                document.getElementById('homeTeam').required = true;
                document.getElementById('awayTeam').required = true;
            } else {
                gameFields.style.display = 'none';
                // Required für Spiel-Felder entfernen
                document.getElementById('homeTeam').required = false;
                document.getElementById('awayTeam').required = false;
            }
        });

        // Modal Event Handlers
        let currentEventId = null;

        // Date Click Handler - Neues Event
        window.handleDateClick = function(info) {
            currentEventId = null;
            
            // Modal für neues Event vorbereiten
            document.getElementById('eventModalLabel').textContent = 'Neues Event erstellen';
            document.getElementById('eventForm').reset();
            document.getElementById('eventId').value = '';
            document.getElementById('eventStartDate').value = info.dateStr;
            
            // End-Datum setzen falls Range-Selection
            if (info.endDateStr && info.endDateStr !== info.dateStr) {
                document.getElementById('eventEndDate').value = info.endDateStr;
            }
            
            document.getElementById('deleteEventBtn').style.display = 'none';
            
            // Spiel-Felder ausblenden
            document.getElementById('gameFields').style.display = 'none';
            document.getElementById('homeTeam').required = false;
            document.getElementById('awayTeam').required = false;
            
            // Location-Felder resetten
            document.getElementById('eventLocation').value = '';
            document.getElementById('eventLocationId').value = '';
            document.getElementById('locationDropdown').style.display = 'none';
            document.getElementById('locationLoading').style.display = 'none';
            
            // Modal anzeigen
            const eventModal = new bootstrap.Modal(document.getElementById('eventModal'));
            eventModal.show();
        };

        // Event Click Handler - Event bearbeiten oder Details anzeigen
        window.handleEventClick = function(info) {
            const event = info.event;
            
            // Alle User sehen zuerst die Detailansicht
            openDetailsModal(event);
        };

        // Edit Modal öffnen
        function openEditModal(event) {
            currentEventId = event.id;
            
            // Modal für Bearbeitung vorbereiten
            document.getElementById('eventModalLabel').textContent = 'Event bearbeiten';
            document.getElementById('eventId').value = event.id;
            document.getElementById('eventTitle').value = event.title;
            document.getElementById('eventDescription').value = event.extendedProps.description || '';
            
            // Start-Datum und Zeit
            const startDate = new Date(event.start);
            document.getElementById('eventStartDate').value = startDate.toISOString().split('T')[0];
            document.getElementById('eventStartTime').value = startDate.toTimeString().split(' ')[0].substring(0, 5);
            
            // End-Datum und Zeit (falls vorhanden)
            if (event.end) {
                const endDate = new Date(event.end);
                document.getElementById('eventEndDate').value = endDate.toISOString().split('T')[0];
                document.getElementById('eventEndTime').value = endDate.toTimeString().split(' ')[0].substring(0, 5);
            }
            
            // Event-Typ
            if (event.extendedProps.type) {
                document.getElementById('eventType').value = event.extendedProps.type.id;
                
                // Trigger change event für Spiel-Felder
                const changeEvent = new Event('change');
                document.getElementById('eventType').dispatchEvent(changeEvent);
            }
            
            // Location
            if (event.extendedProps.location) {
                document.getElementById('eventLocation').value = event.extendedProps.location.name;
                document.getElementById('eventLocationId').value = event.extendedProps.location.id;
            }
            
            // Spiel-spezifische Daten
            if (event.extendedProps.game) {
                const game = event.extendedProps.game;
                if (game.homeTeam) document.getElementById('homeTeam').value = game.homeTeam.id;
                if (game.awayTeam) document.getElementById('awayTeam').value = game.awayTeam.id;
                if (game.gameType) document.getElementById('gameType').value = game.gameType.id;
            }
            
            document.getElementById('deleteEventBtn').style.display = 'inline-block';
            
            // Modal anzeigen
            const eventModal = new bootstrap.Modal(document.getElementById('eventModal'));
            eventModal.show();
        }

        // Details Modal öffnen
        function openDetailsModal(event) {
            const content = document.getElementById('eventDetailsContent');
            let html = `<h6>${event.title}</h6>`;
            
            if (event.start) {
                html += `<p><strong>Start:</strong> ${event.start.toLocaleString('de-DE')}</p>`;
            }
            
            if (event.end) {
                html += `<p><strong>Ende:</strong> ${event.end.toLocaleString('de-DE')}</p>`;
            }
            
            if (event.extendedProps.description) {
                html += `<p><strong>Beschreibung:</strong> ${event.extendedProps.description}</p>`;
            }
            
            if (event.extendedProps.location) {
                html += `<p><strong>Ort:</strong> ${event.extendedProps.location.name}</p>`;
            }
            
            if (event.extendedProps.game) {
                const game = event.extendedProps.game;
                html += `<h6 class="mt-3">Spiel-Details</h6>`;
                if (game.homeTeam) html += `<p><strong>Heim:</strong> ${game.homeTeam.name}</p>`;
                if (game.awayTeam) html += `<p><strong>Auswärts:</strong> ${game.awayTeam.name}</p>`;
                if (game.gameType) html += `<p><strong>Typ:</strong> ${game.gameType.name}</p>`;
            }
            
            content.innerHTML = html;
            
            // Teilnahme-Sektion anzeigen
            document.getElementById('participationSection').style.display = 'block';
            loadParticipationData(event.id);
            
            // Edit/Delete-Buttons für berechtigte User
            const canEdit = {{ (is_granted('ROLE_ADMIN') or is_granted('ROLE_TRAINER') or is_granted('ROLE_SUPER_ADMIN')) ? 'true' : 'false' }};
            
            if (canEdit) {
                document.getElementById('editEventBtn').style.display = 'inline-block';
                document.getElementById('editEventBtn').onclick = function() {
                    const detailsModal = bootstrap.Modal.getInstance(document.getElementById('eventDetailsModal'));
                    detailsModal.hide();
                    openEditModal(event);
                };
                
                document.getElementById('deleteEventFromDetailsBtn').style.display = 'inline-block';
                document.getElementById('deleteEventFromDetailsBtn').onclick = function() {
                    if (confirm('Sind Sie sicher, dass Sie dieses Event löschen möchten?')) {
                        const detailsModal = bootstrap.Modal.getInstance(document.getElementById('eventDetailsModal'));
                        detailsModal.hide();
                        deleteEvent(event.id);
                    }
                };
            } else {
                document.getElementById('editEventBtn').style.display = 'none';
                document.getElementById('deleteEventFromDetailsBtn').style.display = 'none';
            }
            
            const detailsModal = new bootstrap.Modal(document.getElementById('eventDetailsModal'));
            detailsModal.show();
        }

        // Save Event Handler
        document.getElementById('saveEventBtn').addEventListener('click', function() {
            if (!validateEventForm()) return;
            
            const formData = collectEventFormData();
            
            if (currentEventId) {
                // Update existing event
                updateEvent(currentEventId, formData);
            } else {
                // Create new event
                createEvent(formData);
            }
        });

        // Delete Event Handler
        document.getElementById('deleteEventBtn').addEventListener('click', function() {
            if (!currentEventId) return;
            
            if (confirm('Sind Sie sicher, dass Sie dieses Event löschen möchten?')) {
                deleteEvent(currentEventId);
            }
        });

        // Form Validation
        function validateEventForm() {
            const title = document.getElementById('eventTitle').value.trim();
            const startDate = document.getElementById('eventStartDate').value;
            const eventType = document.getElementById('eventType').value;
            
            if (!title) {
                showNotification('Bitte geben Sie einen Titel ein.', 'error');
                return false;
            }
            
            if (!startDate) {
                showNotification('Bitte wählen Sie ein Start-Datum.', 'error');
                return false;
            }
            
            if (!eventType) {
                showNotification('Bitte wählen Sie einen Event-Typ.', 'error');
                return false;
            }
            
            // Spiel-spezifische Validierung
            const isGame = document.getElementById('eventType').options[document.getElementById('eventType').selectedIndex].dataset.isGame === 'true';
            if (isGame) {
                const homeTeam = document.getElementById('homeTeam').value;
                const awayTeam = document.getElementById('awayTeam').value;
                
                if (!homeTeam) {
                    showNotification('Bitte wählen Sie ein Heim-Team.', 'error');
                    return false;
                }
                
                if (!awayTeam) {
                    showNotification('Bitte wählen Sie ein Auswärts-Team.', 'error');
                    return false;
                }
                
                if (homeTeam === awayTeam) {
                    showNotification('Heim- und Auswärts-Team dürfen nicht identisch sein.', 'error');
                    return false;
                }
            }
            
            return true;
        }

        // Collect Form Data
        function collectEventFormData() {
            const startDate = document.getElementById('eventStartDate').value;
            const startTime = document.getElementById('eventStartTime').value || '00:00';
            const endDate = document.getElementById('eventEndDate').value;
            const endTime = document.getElementById('eventEndTime').value || '23:59';
            
            const data = {
                title: document.getElementById('eventTitle').value.trim(),
                description: document.getElementById('eventDescription').value.trim(),
                startDate: `${startDate}T${startTime}:00`,
                typeId: parseInt(document.getElementById('eventType').value),
                locationId: document.getElementById('eventLocationId').value || null
            };
            
            // End-Datum nur setzen wenn angegeben
            if (endDate) {
                data.endDate = `${endDate}T${endTime}:00`;
            }
            
            // Spiel-spezifische Daten
            const isGame = document.getElementById('eventType').options[document.getElementById('eventType').selectedIndex].dataset.isGame === 'true';
            if (isGame) {
                data.homeTeamId = document.getElementById('homeTeam').value || null;
                data.awayTeamId = document.getElementById('awayTeam').value || null;
                data.gameTypeId = document.getElementById('gameType').value || null;
            }
            
            return data;
        }

        // API Calls
        function createEvent(data) {
            fetch('{{ path('api_calendar_event_create') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showNotification('Event erfolgreich erstellt!', 'success');
                    const eventModal = bootstrap.Modal.getInstance(document.getElementById('eventModal'));
                    eventModal.hide();
                    window.calendar.refetchEvents();
                } else {
                    showNotification(result.error || 'Fehler beim Erstellen des Events.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Fehler beim Erstellen des Events.', 'error');
            });
        }

        function updateEvent(eventId, data) {
            fetch(`{{ path('api_calendar_event_update', {id: '__ID__'}) }}`.replace('__ID__', eventId), {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showNotification('Event erfolgreich aktualisiert!', 'success');
                    const eventModal = bootstrap.Modal.getInstance(document.getElementById('eventModal'));
                    eventModal.hide();
                    window.calendar.refetchEvents();
                } else {
                    showNotification(result.error || 'Fehler beim Aktualisieren des Events.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Fehler beim Aktualisieren des Events.', 'error');
            });
        }

        function deleteEvent(eventId) {
            fetch(`{{ path('api_calendar_event_delete', {id: '__ID__'}) }}`.replace('__ID__', eventId), {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    showNotification('Event erfolgreich gelöscht!', 'success');
                    const eventModal = bootstrap.Modal.getInstance(document.getElementById('eventModal'));
                    eventModal.hide();
                    window.calendar.refetchEvents();
                } else {
                    showNotification('Fehler beim Löschen des Events.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showNotification('Fehler beim Löschen des Events.', 'error');
            });
        }

        // Add Event Button Handler (aus der Event Delegation)
        window.handleAddEvent = function() {
            const today = new Date().toISOString().split('T')[0];
            window.handleDateClick({ dateStr: today });
        };

        // Participation Management
        let availableStatuses = [];
        let currentUserParticipation = null;

        function loadParticipationData(eventId) {
            currentEventId = eventId;
            
            // Reset previous data
            document.getElementById('participationButtons').innerHTML = '';
            document.getElementById('participationNote').value = '';
            document.getElementById('currentParticipationStatus').style.display = 'none';
            document.getElementById('participationsList').innerHTML = `
                <div class="text-center">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Laden...</span>
                    </div>
                    <small class="d-block mt-2">Lade Teilnahmen...</small>
                </div>
            `;
            
            // Load participation data
            fetch(`{{ path('api_participation_status', {id: '__ID__'}) }}`.replace('__ID__', eventId))
                .then(response => response.json())
                .then(data => {
                    availableStatuses = data.available_statuses;
                    
                    // Find current user's participation
                    currentUserParticipation = data.participations.find(p => p.user_id === {{ app.user ? app.user.id : 'null' }});
                    
                    renderParticipationButtons();
                    renderParticipationsList(data.participations);
                    
                    if (currentUserParticipation) {
                        document.getElementById('participationNote').value = currentUserParticipation.note || '';
                        showCurrentParticipationStatus(currentUserParticipation.status);
                    }
                })
                .catch(error => {
                    console.error('Error loading participation data:', error);
                    document.getElementById('participationsList').innerHTML = `
                        <div class="alert alert-danger">
                            Fehler beim Laden der Teilnahmen
                        </div>
                    `;
                });
        }

        function renderParticipationButtons() {
            const buttonsContainer = document.getElementById('participationButtons');
            let html = '';
            
            availableStatuses.forEach(status => {
                const isActive = currentUserParticipation && currentUserParticipation.status.id === status.id;
                const btnClass = isActive ? 'btn-primary' : 'btn-outline-secondary';
                const icon = status.icon ? `<i class="${status.icon} me-1"></i>` : '';
                
                html += `
                    <button type="button" 
                            class="btn ${btnClass} participation-btn" 
                            data-status-id="${status.id}"
                            data-status-name="${status.name}"
                            data-status-color="${status.color || '#6c757d'}"
                            style="${status.color ? `border-color: ${status.color};` : ''} ${isActive && status.color ? `background-color: ${status.color}; border-color: ${status.color};` : ''}">
                        ${icon}${status.name}
                    </button>
                `;
            });
            
            buttonsContainer.innerHTML = html;
            
            // Add click handlers
            document.querySelectorAll('.participation-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const statusId = this.dataset.statusId;
                    const note = document.getElementById('participationNote').value.trim();
                    submitParticipation(statusId, note);
                });
            });
        }

        function renderParticipationsList(participations) {
            const listContainer = document.getElementById('participationsList');
            
            if (participations.length === 0) {
                listContainer.innerHTML = `
                    <div class="text-muted text-center">
                        <i class="fas fa-info-circle me-2"></i>Noch keine Teilnahmen
                    </div>
                `;
                return;
            }
            
            // Group by status
            const groupedParticipations = {};
            participations.forEach(p => {
                const statusName = p.status.name;
                if (!groupedParticipations[statusName]) {
                    groupedParticipations[statusName] = {
                        status: p.status,
                        participants: []
                    };
                }
                groupedParticipations[statusName].participants.push(p);
            });
            
            let html = '';
            Object.values(groupedParticipations).forEach(group => {
                const status = group.status;
                const participants = group.participants;
                const icon = status.icon ? `<i class="${status.icon} me-2"></i>` : '';
                const color = status.color || '#6c757d';
                
                html += `
                    <div class="mb-3">
                        <h6 class="fw-bold" style="color: ${color};">
                            ${icon}${status.name} (${participants.length})
                        </h6>
                        <div class="ms-3">
                `;
                
                participants.forEach(p => {
                    const teamPlayerBadge = p.is_team_player ? 
                        '<span class="badge bg-success ms-2">Spieler</span>' : '';
                    const note = p.note ? 
                        `<small class="text-muted d-block">${p.note}</small>` : '';
                    
                    html += `
                        <div class="d-flex justify-content-between align-items-start py-1">
                            <div>
                                <span>${p.user_name}</span>
                                ${teamPlayerBadge}
                                ${note}
                            </div>
                        </div>
                    `;
                });
                
                html += `
                        </div>
                    </div>
                `;
            });
            
            listContainer.innerHTML = html;
        }

        function showCurrentParticipationStatus(status) {
            const statusDiv = document.getElementById('currentParticipationStatus');
            const icon = status.icon ? `<i class="${status.icon} me-2"></i>` : '';
            const color = status.color || '#0dcaf0';
            
            statusDiv.innerHTML = `
                ${icon}Ihre aktuelle Teilnahme: <strong style="color: ${color};">${status.name}</strong>
            `;
            statusDiv.style.display = 'block';
        }

        function submitParticipation(statusId, note) {
            if (!currentEventId) return;
            
            const formData = new FormData();
            formData.append('status_id', statusId);
            formData.append('note', note);
            
            fetch(`{{ path('api_participation_respond', {id: '__ID__'}) }}`.replace('__ID__', currentEventId), {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.message) {
                    showNotification(data.message, 'success');
                    // Reload participation data
                    loadParticipationData(currentEventId);
                } else if (data.error) {
                    showNotification(data.error, 'error');
                }
            })
            .catch(error => {
                console.error('Error submitting participation:', error);
                showNotification('Fehler beim Speichern der Teilnahme', 'error');
            });
        }
    });

    // Global notification function
    function showNotification(message, type = 'info', duration = 5000) {
        const alertClass = type === 'success' ? 'alert-success' : 
                          type === 'error' ? 'alert-danger' : 
                          type === 'warning' ? 'alert-warning' : 
                          'alert-info';
        
        const notification = document.createElement('div');
        notification.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px; max-width: 500px;';
        notification.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                <div>${message}</div>
                <button type="button" class="btn-close ms-auto" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Auto-remove
        if (duration > 0) {
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, duration);
        }
        
        return notification;
    }

    // Make notification function globally available
    window.showNotification = showNotification;
    </script>
{% endblock %}
