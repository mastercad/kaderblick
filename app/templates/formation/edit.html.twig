{# templates/formation/edit.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Aufstellung bearbeiten{% endblock %}

{% block body %}
    <div class="container mt-4">
        <h1>{{ formation.name }} <small class="text-muted">Aufstellung bearbeiten</small></h1>
        
        <div class="row">
            <div class="col-12 col-lg-8">
                <div class="pitch formation-background sports-field editable {{ formation.formationType.cssClass|default('field-default') }}" 
                     id="formationPitch"
                     {% if formation.formationType.backgroundPath %}
                     style="background-image: url('/images/formation/{{ formation.formationType.backgroundPath }}');"
                     data-background-image="{{ formation.formationType.backgroundPath }}"
                     {% else %}
                     style="background-image: url('/images/formation/fussballfeld_haelfte.jpg');"
                     data-background-image="fussballfeld_haelfte.jpg"
                     {% endif %}>
                    {# Spieler werden hier per JavaScript hinzugefügt #}
                </div>
                
                <div class="mb-3">
                    <button class="btn btn-secondary" id="addGenericPlayer">Generischen Spieler hinzufügen</button>
                    <button class="btn btn-success" id="saveFormation">Speichern</button>
                </div>
            </div>
            
            <div class="col-12 col-lg-4">
                {% if not availablePlayers.singleTeam %}
                <div class="card mb-3">
                    <div class="card-header">
                        Team auswählen
                    </div>
                    <div class="card-body">
                        <select class="selectpicker" data-style="form-select" id="teamSelector">
                            <option value="">Bitte Team auswählen...</option>
                            {% for team in availablePlayers.teams %}
                                <option value="{{ team.id }}">{{ team.name }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
                {% endif %}

                <div class="card mb-3">
                    <div class="card-header">
                        Verfügbare Spieler
                    </div>
                    <div class="card-body" id="availablePlayers">
                        {% if availablePlayers.singleTeam %}
                            {% for playerData in availablePlayers.players %}
                                {% set player = playerData.player %}
                                {% set shirtNumber = playerData.shirtNumber %}
                                <div class="available-player mb-2" data-player-id="{{ player.id }}" data-player-name="{{ player.fullName }}" data-shirt-number="{{ shirtNumber }}">
                                    <button class="btn btn-outline-primary btn-sm w-100" onclick="addPlayerToFormation({{ player.id }}, '{{ player.fullName }}', {{ shirtNumber ?: 'null' }})">
                                        {% if shirtNumber %}#{{ shirtNumber }}{% else %}?{% endif %} {{ player.fullName }}
                                    </button>
                                </div>
                            {% endfor %}
                        {% else %}
                            <p class="text-muted" id="noTeamSelected">Bitte zuerst ein Team auswählen.</p>
                        {% endif %}
                    </div>
                </div>
                
                <div class="card mb-3">
                    <div class="card-header">
                        Spielerliste
                    </div>
                    <div class="card-body" id="playerList">
                        {# Spielerliste #}
                    </div>
                </div>
                
                <div class="card mb-3">
                    <div class="card-header">
                        Aufstellungs-Code
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <input type="text" class="form-control" id="formationCode" 
                                   placeholder="z.B. 4-4-2" value="{{ formation.formationData.code|default('') }}">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast für Speicher-Feedback -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="saveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Aufstellung</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                Aufstellung erfolgreich gespeichert!
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const pitch = document.getElementById('formationPitch');
            const addGenericPlayerBtn = document.getElementById('addGenericPlayer');
            const saveBtn = document.getElementById('saveFormation');
            const formationCode = document.getElementById('formationCode');
            const teamSelector = document.getElementById('teamSelector');
            
            // Feld-Proportionen basierend auf Hintergrundbild anpassen
            function adjustPitchProportions() {
                const backgroundImage = pitch.dataset.backgroundImage;
                if (backgroundImage) {
                    const img = new Image();
                    img.onload = function() {
                        const aspectRatio = this.width / this.height;
                        const maxWidth = pitch.parentElement.clientWidth - 40; // 40px margin
                        const maxHeight = 600; // Maximale Höhe
                        
                        let width, height;
                        if (aspectRatio > 1) {
                            // Querformat
                            width = Math.min(maxWidth, maxHeight * aspectRatio);
                            height = width / aspectRatio;
                        } else {
                            // Hochformat oder quadratisch
                            height = Math.min(maxHeight, maxWidth / aspectRatio);
                            width = height * aspectRatio;
                        }
                        
                        pitch.style.width = width + 'px';
                        pitch.style.height = height + 'px';
                        pitch.style.backgroundSize = 'cover';
                        pitch.style.backgroundPosition = 'center';
                        pitch.style.backgroundRepeat = 'no-repeat';
                    };
                    img.src = `/images/formation/${backgroundImage}`;
                }
            }
            
            // Proportionen beim Laden und bei Fenstergröße-Änderung anpassen
            adjustPitchProportions();
            window.addEventListener('resize', adjustPitchProportions);
            
            let players = [];
            let nextPlayerNumber = 1;
            let availablePlayersData = [];
            
            // Team-Selector Event (falls mehrere Teams vorhanden)
            if (teamSelector) {
                teamSelector.addEventListener('change', function() {
                    const teamId = this.value;
                    if (teamId) {
                        loadTeamPlayers(teamId);
                    } else {
                        clearAvailablePlayers();
                    }
                });
            }

            // Initiale Spieler laden, falls vorhanden
            {% if formation.formationData.players is defined %}
                players = {{ formation.formationData.players|json_encode|raw }};
                // Für bestehende Daten Rückwärtskompatibilität sicherstellen
                players.forEach(player => {
                    if (!player.hasOwnProperty('displayNumber')) {
                        player.displayNumber = player.isRealPlayer ? player.number : `G${player.number}`;
                    }
                    if (!player.hasOwnProperty('isRealPlayer')) {
                        player.isRealPlayer = !!player.playerId;
                    }
                });
                nextPlayerNumber = players.length > 0 ? 
                    Math.max(...players.map(p => p.number)) + 1 : 1;
                renderPlayers();
            {% endif %}
            
            // Funktion zum Laden der Spieler eines Teams
            function loadTeamPlayers(teamId) {
                fetch(`{{ path('formation_team_players', {'teamId': 'TEAM_ID'}) }}`.replace('TEAM_ID', teamId))
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            console.error('Fehler beim Laden der Spieler:', data.error);
                            return;
                        }
                        
                        availablePlayersData = data.players;
                        renderAvailablePlayers();
                    })
                    .catch(error => {
                        console.error('Fehler beim Laden der Spieler:', error);
                    });
            }
            
            // Verfügbare Spieler anzeigen
            function renderAvailablePlayers() {
                const container = document.getElementById('availablePlayers');
                container.innerHTML = '';
                
                availablePlayersData.forEach(player => {
                    const playerDiv = document.createElement('div');
                    playerDiv.className = 'available-player mb-2';
                    playerDiv.dataset.playerId = player.id;
                    playerDiv.dataset.playerName = player.name;
                    playerDiv.dataset.shirtNumber = player.shirtNumber || '';
                    
                    const button = document.createElement('button');
                    button.className = 'btn btn-outline-primary btn-sm w-100';
                    const shirtDisplay = player.shirtNumber ? `#${player.shirtNumber} ` : '? ';
                    button.textContent = `${shirtDisplay}${player.name}`;
                    button.onclick = () => addPlayerToFormation(player.id, player.name, player.shirtNumber);
                    
                    // Prüfen ob Spieler bereits in der Formation ist
                    const existingPlayer = players.find(p => p.playerId === player.id);
                    if (existingPlayer) {
                        button.classList.add('player-selected');
                        button.disabled = true;
                    }
                    
                    playerDiv.appendChild(button);
                    container.appendChild(playerDiv);
                });
            }
            
            // Verfügbare Spieler leeren
            function clearAvailablePlayers() {
                const container = document.getElementById('availablePlayers');
                const noTeamSelected = document.getElementById('noTeamSelected');
                if (noTeamSelected) {
                    container.innerHTML = '<p class="text-muted" id="noTeamSelected">Bitte zuerst ein Team auswählen.</p>';
                } else {
                    container.innerHTML = '';
                }
                availablePlayersData = [];
            }
            
            // Spieler aus verfügbarer Liste zur Formation hinzufügen
            window.addPlayerToFormation = function(playerId, playerName, shirtNumber = null) {
                // Prüfen ob Spieler bereits hinzugefügt wurde
                const existingPlayer = players.find(p => p.playerId === playerId);
                if (existingPlayer) {
                    return;
                }

                // Freie Position suchen wie bei generischen Spielern
                const position = findFreePosition();
                const player = {
                    id: Date.now(),
                    number: shirtNumber || nextPlayerNumber++,
                    displayNumber: shirtNumber || `G${nextPlayerNumber - 1}`,
                    x: position.x,
                    y: position.y,
                    name: playerName,
                    playerId: playerId,
                    isRealPlayer: !!playerId
                };
                players.push(player);
                renderPlayers();

                // Button als ausgewählt markieren
                const button = document.querySelector(`[data-player-id="${playerId}"] button`);
                if (button) {
                    button.classList.add('player-selected');
                    button.disabled = true;
                }
            };
            
            // Freie Position für neuen Spieler finden
            function findFreePosition() {
                const gridSize = 15; // 15% Abstand zwischen Spielern
                const startX = 15;   // Beginne bei 15% vom linken Rand
                const startY = 15;   // Beginne bei 15% vom oberen Rand
                
                for (let row = 0; row < 5; row++) {
                    for (let col = 0; col < 5; col++) {
                        const x = startX + (col * gridSize);
                        const y = startY + (row * gridSize);
                        
                        // Prüfe ob Position bereits belegt ist
                        const isOccupied = players.some(player => 
                            Math.abs(player.x - x) < 10 && Math.abs(player.y - y) < 10
                        );
                        
                        if (!isOccupied && x <= 85 && y <= 85) {
                            return { x, y };
                        }
                    }
                }
                
                // Fallback: Zufällige Position
                return { 
                    x: 20 + Math.random() * 60, 
                    y: 20 + Math.random() * 60 
                };
            }

            // Generischen Spieler hinzufügen (alte Funktionalität beibehalten)
            addGenericPlayerBtn.addEventListener('click', function() {
                const genericNumber = nextPlayerNumber++;
                const position = findFreePosition();
                const player = {
                    id: Date.now(),
                    number: genericNumber,
                    displayNumber: `G${genericNumber}`,
                    x: position.x,
                    y: position.y,
                    name: `Spieler ${genericNumber}`,
                    playerId: null, // Kein echter Spieler
                    isRealPlayer: false
                };
                players.push(player);
                renderPlayers();
            });
            
            // Spieler rendern
            function renderPlayers() {
                pitch.innerHTML = '';
                players.forEach(player => {
                    const playerEl = document.createElement('div');
                    playerEl.className = 'formation-player';
                    playerEl.style.left = `${player.x}%`;
                    playerEl.style.top = `${player.y}%`;
                    playerEl.dataset.id = player.id;
                    playerEl.innerHTML = `<span class="player-number">${player.displayNumber || player.number}</span>`;
                    
                    // Drag & Drop
                    makeDraggable(playerEl, player);
                    
                    pitch.appendChild(playerEl);
                });
                
                updatePlayerList();
            }
            
            // Spielerliste aktualisieren
            function updatePlayerList() {
                const playerList = document.getElementById('playerList');
                playerList.innerHTML = '';
                
                players.forEach(player => {
                    const playerItem = document.createElement('div');
                    playerItem.className = 'd-flex justify-content-between align-items-center mb-2';
                    const playerTypeIcon = player.isRealPlayer ? 
                        '<i class="bi bi-person-fill text-success ms-2" title="Echter Spieler"></i>' : 
                        '<i class="bi bi-person-plus-fill text-muted ms-2" title="Generischer Spieler"></i>';
                    const displayNumber = player.displayNumber || player.number;
                    
                    playerItem.innerHTML = `
                        <div class="d-flex align-items-center flex-grow-1 me-2">
                            <span class="badge ${player.isRealPlayer ? 'bg-success' : 'bg-secondary'} me-2">${displayNumber}</span>
                            <input type="text" class="form-control form-control-sm flex-grow-1" 
                                   value="${player.name}" data-id="${player.id}" 
                                   onchange="updatePlayerName(this)" ${player.playerId ? 'readonly' : ''}>
                            ${playerTypeIcon}
                        </div>
                        <button class="btn btn-sm btn-danger flex-shrink-0" onclick="removePlayer(${player.id})">
                            <i class="bi bi-trash"></i>
                        </button>
                    `;
                    playerList.appendChild(playerItem);
                });
            }
            
            // Drag & Drop Funktion
            function makeDraggable(element, playerData) {
                let isDragging = false;
                let offsetX, offsetY;
                
                element.addEventListener('mousedown', function(e) {
                    isDragging = true;
                    element.classList.add('dragging');
                    offsetX = e.clientX - element.getBoundingClientRect().left;
                    offsetY = e.clientY - element.getBoundingClientRect().top;
                    element.style.cursor = 'grabbing';
                    e.preventDefault();
                });
                
                document.addEventListener('mousemove', function(e) {
                    if (!isDragging) return;
                    
                    const pitchRect = pitch.getBoundingClientRect();
                    let x = e.clientX - pitchRect.left - offsetX;
                    let y = e.clientY - pitchRect.top - offsetY;
                    
                    // Begrenzung auf das Spielfeld
                    x = Math.max(0, Math.min(x, pitchRect.width - element.offsetWidth));
                    y = Math.max(0, Math.min(y, pitchRect.height - element.offsetHeight));
                    
                    // Position in Prozent speichern
                    playerData.x = (x / pitchRect.width) * 100;
                    playerData.y = (y / pitchRect.height) * 100;
                    
                    element.style.left = `${playerData.x}%`;
                    element.style.top = `${playerData.y}%`;
                });
                
                document.addEventListener('mouseup', function() {
                    isDragging = false;
                    element.classList.remove('dragging');
                    element.style.cursor = 'move';
                });
            }
            
            // Spieler entfernen
            window.removePlayer = function(id) {
                const player = players.find(p => p.id === id);
                if (player && player.playerId) {
                    // Button wieder aktivieren, falls es ein echter Spieler war
                    const button = document.querySelector(`[data-player-id="${player.playerId}"] button`);
                    if (button) {
                        button.classList.remove('player-selected');
                        button.disabled = false;
                    }
                }
                
                players = players.filter(player => player.id !== id);
                renderPlayers();
            };
            
            // Spielername aktualisieren (nur für generische Spieler)
            window.updatePlayerName = function(input) {
                const id = parseInt(input.dataset.id);
                const player = players.find(p => p.id === id);
                if (player && !player.playerId) { // Nur generische Spieler können umbenannt werden
                    player.name = input.value;
                }
            };
            
            // Initiale Anzeige der verfügbaren Spieler falls nur ein Team
            {% if availablePlayers.singleTeam and availablePlayers.players|length > 0 %}
                // Spielerdaten für Single-Team setzen
                availablePlayersData = [
                    {% for playerData in availablePlayers.players %}
                    {% set player = playerData.player %}
                    {% set shirtNumber = playerData.shirtNumber %}
                    {
                        id: {{ player.id }},
                        name: "{{ player.fullName }}",
                        shirtNumber: {{ shirtNumber ?: 'null' }}
                    }{% if not loop.last %},{% endif %}
                    {% endfor %}
                ];
                renderAvailablePlayers();
            {% endif %}
            
            // Aufstellung speichern
            saveBtn.addEventListener('click', function() {
                const data = {
                    players: players,
                    code: formationCode.value,
                    timestamp: new Date().toISOString()
                };
                
                fetch('{{ path('formation_edit', {'id': formation.id}) }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        const toast = new bootstrap.Toast(document.getElementById('saveToast'));
                        toast.show();
                    }
                });
            });
        });
    </script>
{% endblock %}
