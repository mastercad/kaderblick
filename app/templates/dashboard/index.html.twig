{% extends 'base.html.twig' %}

{% block title %}Dashboard{% endblock %}

{% block body %}    
<style>
    /* Verhindert Textauswahl und Scrollen während Drag auf Touch */
    .card-header, .widget-item, .card-header *, .widget-item * {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        -webkit-touch-callout: none;
        touch-action: manipulation;
    }
    .drag-active {
        background: rgba(0,123,255,0.08);
        transition: background 0.2s;
    }
</style>

<div class="container-fluid">
    {% if ( is_granted('IS_AUTHENTICATED_FULLY') ) %}
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Dashboard</h1>
        {% if ( is_granted('ROLE_SUPERADMIN') ) %}
        <div class="form-group md-4">
            <input type="checkbox" class="form-check-input" id="defaultWidgetCheckbox">
            <label class="form-check-label" for="defaultWidgetCheckbox">Standard-Dashboard</label>
        </div>
        {% endif %}
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addWidgetModal">
            <i class="fas fa-plus"></i> Widget hinzufügen
        </button>
    </div>

    {# Report Auswahl Modal #}
    <div class="modal fade" id="selectReportModal" tabindex="-1" aria-labelledby="selectReportModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="selectReportModalLabel">Report auswählen</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="reportListLoading" class="text-center my-3" style="display:none;">
                        <div class="spinner-border" role="status"><span class="visually-hidden">Laden...</span></div>
                    </div>
                    <div id="reportListContainer">
                        <!-- Dynamisch per JS geladen -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abbrechen</button>
                    <button type="button" class="btn btn-primary" id="addReportWidgetsBtn">Hinzufügen</button>
                </div>
            </div>
        </div>
    </div>

    <div id="widgetContainer">
        <div class="row widget-grid" id="widgetGrid">
            {% for widget in widgets %}
                <div class="col-md-{{ widget.width }} mb-4 widget-item" data-widget-id="{{ widget.id }}" data-widget-position="{{ widget.position }}">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">{{ widget.type | replace({'_': ' '}) | title }}</h5>
                            <div class="btn-group">
                                <button type="button" class="btn btn-sm btn-outline-secondary widget-refresh" title="Aktualisieren">
                                    <i class="fas fa-sync-alt"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-secondary widget-settings" title="Einstellungen">
                                    <i class="fas fa-cog"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger widget-delete" title="Entfernen">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body widget-content" data-widget-type="{{ widget.type }}">
                            {# Widget-Inhalt wird per JavaScript geladen #}
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Laden...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
{% else %}
    <section class="welcome">
        <h1>Willkommen zur Spiel- & Teamverwaltung</h1>
        <p>
            Diese Plattform unterstützt Jugendmannschaften bei der Organisation von Spielen, der Verwaltung von Spielern und Trainern sowie der Analyse von Ergebnissen.
        </p>
    </section>
    <section class="features">
        <h2>Was bietet die Anwendung?</h2>
        <ul>
            <li>Spiele und Termine planen</li>
            <li>Spieler- und Trainerprofile verwalten</li>
            <li>Ergebnisse und Statistiken auswerten</li>
            <li>Berichte und Analysen für die Trainingsarbeit</li>
        </ul>
    </section>
    <section class="cta">
        <button class="btn text-start justify-content-start" onclick="const modalManager = (window.modalManager || window.ModalManager); modalManager.showModal('auth_modal')">
            <i class="fas fa-sign-in-alt me-1"></i>
            Jetzt einloggen
        </button>
    </section>
{% endif %}
</div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {% if ( is_granted('ROLE_USER') ) %}
    <!-- Dashboard Modal System -->
    <script src="/js/dashboard-modals.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/interactjs/dist/interact.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const grid = document.getElementById('widgetGrid');
            function isRealTouchDevice() {
                return (
                    ('ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0)
                    && window.matchMedia('(pointer: coarse)').matches
                );
            }
            // Desktop: SortableJS wie gehabt
            if (!isRealTouchDevice()) {
                new Sortable(grid, {
                    animation: 150,
                    handle: '.card-header',
                    draggable: '.widget-item',
                    onEnd: updateWidgetPositions
                });
            } else {
                // Touch: Interact.js für Drag-and-Drop
                interact('.widget-item').draggable({
                    allowFrom: '.card-header',
                    listeners: {
                        start (event) {
                            event.target.classList.add('drag-active');
                            event.target.style.zIndex = 1000;
                        },
                        move (event) {
                            if (!event.target.hasAttribute('data-x')) {
                                event.target.setAttribute('data-x', 0);
                                event.target.setAttribute('data-y', 0);
                            }
                            let x = (parseFloat(event.target.getAttribute('data-x')) || 0) + event.dx;
                            let y = (parseFloat(event.target.getAttribute('data-y')) || 0) + event.dy;
                            event.target.style.transform = `translate(${x}px, ${y}px)`;
                            event.target.setAttribute('data-x', x);
                            event.target.setAttribute('data-y', y);
                        },
                        end (event) {
                            event.target.classList.remove('drag-active');
                            event.target.style.transform = '';
                            event.target.style.zIndex = '';
                            event.target.removeAttribute('data-x');
                            event.target.removeAttribute('data-y');
                            // Nach Drag: Widget-Positionen neu berechnen
                            // Finde neue Reihenfolge anhand der Position im Grid
                            const items = Array.from(grid.querySelectorAll('.widget-item'));
                            items.sort((a, b) => a.getBoundingClientRect().top - b.getBoundingClientRect().top || a.getBoundingClientRect().left - b.getBoundingClientRect().left);
                            items.forEach((item, idx) => {
                                item.dataset.widgetPosition = idx + 1;
                            });
                            updateWidgetPositions();
                        }
                    },
                    inertia: true,
                    modifiers: [
                        interact.modifiers.restrictRect({
                            restriction: grid,
                            endOnly: true
                        })
                    ]
                });
            }
            grid.addEventListener('touchmove', function(e) {
                if (!dragTarget) return;
                touchMove = true;
                clearTimeout(longPressTimer);
                removeProgressCircle();
                dragTarget = null;
                // Textauswahl und Scrollen wieder erlauben
                document.body.style.userSelect = '';
                document.body.style.touchAction = '';
            }, {passive: true});

            grid.addEventListener('touchend', function(e) {
                clearTimeout(longPressTimer);
                setTimeout(() => {
                    // disableDrag(); // handled in onEnd
                }, 300);
                removeProgressCircle();
                dragTarget = null;
                // Textauswahl und Scrollen wieder erlauben
                document.body.style.userSelect = '';
                document.body.style.touchAction = '';
            });
        });

        document.querySelectorAll('.widget-item').forEach(async widget => {
            await loadWidgetContent(widget);
        });

        function handleWidgetInteraction(e) {
            const deleteBtn = e.target.closest('.widget-delete');
            if (deleteBtn) {
                handleDelete(deleteBtn);
                e.preventDefault();
                return;
            }

            const settingsBtn = e.target.closest('.widget-settings');
            if (settingsBtn) {
                handleSettings(settingsBtn);
                e.preventDefault();
                return;
            }

            const refreshButton = e.target.closest('.widget-refresh');
            if (refreshButton) {
                handleRefresh(refreshButton);
                e.preventDefault();
                return;
            }
        }

        document.addEventListener('pointerup', handleWidgetInteraction);

        const defaultWidgetCheckbox = document.getElementById('defaultWidgetCheckbox');
        if (defaultWidgetCheckbox) {
            defaultWidgetCheckbox.checked = {{ isDefault ? 'true' : 'false' }};
            defaultWidgetCheckbox.addEventListener('change', function() {
                updateWidgetPositions();
            });
        }

        async function handleDelete(button) {
            if (!confirm('Widget wirklich entfernen?')) return;
            
            const widget = button.closest('.widget-item');
            const widgetId = widget.dataset.widgetId;

            try {
                const response = await fetch(`/widget/${widgetId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    widget.remove();
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        function handleSettings(button) {
            const widget = button.closest('.widget-item');
            const widgetId = widget.dataset.widgetId;
            const widgetPosition = widget.dataset.widgetPosition;
            const width = parseInt(widget.className.match(/col-md-(\d+)/)[1]);
            
            const modal = `
                <div class="modal fade" id="widgetSettings${widgetId}" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Widget-Einstellungen</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label class="form-label">Breite</label>
                                    <select class="selectpicker form-select widget-width">
                                        <option value="3" ${width === 3 ? 'selected' : ''}>Schmal (25%)</option>
                                        <option value="4" ${width === 4 ? 'selected' : ''}>Normal (33%)</option>
                                        <option value="6" ${width === 6 ? 'selected' : ''}>Breit (50%)</option>
                                        <option value="12" ${width === 12 ? 'selected' : ''}>Volle Breite (100%)</option>
                                    </select>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abbrechen</button>
                                <button type="button" class="btn btn-primary save-settings">Speichern</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modal);
            const modalElement = document.getElementById(`widgetSettings${widgetId}`);
            const bsModal = new bootstrap.Modal(modalElement);

            modalElement.querySelector('.save-settings').addEventListener('click', async function() {
                const newWidth = modalElement.querySelector('.widget-width').value;
                widget.className = widget.className.replace(/col-md-\d+/, `col-md-${newWidth}`);
                
                await loadWidgetContent(widget);
//                await saveWidgetSettings(widgetId, { id: widgetId, width: newWidth, position: widgetPosition });
                await updateWidgetPositions();
                bsModal.hide();
                modalElement.remove();
            });
    
            bsModal.show();
        }

        function handleRefresh(button) {
            const widget = button.closest('.widget-item');
            loadWidgetContent(widget);
        }
    </script>
    {% endif %}
{% endblock %}
