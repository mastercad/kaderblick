{% extends 'base.html.twig' %}

{% block title %}{{ entity }} Übersicht{% endblock %}

{% block body %}
<h1>
  Übersicht aller {{ entity }}s
  <button class="btn btn-success" id="add_entry" alt="add new Entry" type="button">
    <i class="fa fa-plus"></i>
  </button> 
</h1>

<table class="table">
  <thead>
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Adresse</th>
      <th>Stadt</th>
      <th>Kapazität</th>
    </tr>
  </thead>
  <tbody id="entry_list">
  </tbody>
</table>

<div class="modal fade" id="add_entry_modal" tabindex="-1" aria-labelledby="add_entry_modal_label" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="entry_form">
        <div class="modal-header">
          <h5 class="modal-title" id="add_entry_modal_label">Neuen {{ entity }} Eintrag anlegen</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Schließen"></button>
        </div>
        <div class="modal-body" id="edit_form_field_list">
          <div class="mb-3">
            <label for="name" class="form-label">Name *</label>
            <input type="text" class="form-control" id="name" name="name" required>
          </div>
          <div class="mb-3">
            <label for="address" class="form-label">Adresse</label>
            <input type="text" class="form-control" id="address" name="address">
          </div>
          <div class="mb-3">
            <label for="city" class="form-label">Stadt</label>
            <input type="text" class="form-control" id="city" name="city">
          </div>
          <div class="mb-3">
            <label for="capacity" class="form-label">Kapazität</label>
            <input type="number" class="form-control" id="capacity" name="capacity" min="0">
          </div>
        </div>
        <div id="edit_modal_error_container">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abbrechen</button>
          <button type="submit" class="btn btn-primary">Speichern</button>
        </div>
      </form>
    </div>
  </div>
</div>

<div class="modal fade" id="delete_entry_modal" tabindex="-1" aria-labelledby="delete_entry_modal_label" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="add_entry_modal_label">Neuen {{ entity }} Eintrag anlegen</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Schließen"></button>
      </div>
      <div class="modal-body" id="edit_form_field_list">
        <div class="warning">
          <p>Wollen Sie diesen Eintrag wirklich löschen?</p>
          <p>Dies kann nicht rückgängig gemacht werden!</p>
        </div>
      </div>
      <div id="edit_modal_error_container">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abbrechen</button>
        <button type="button" class="btn btn-primary" id="delete_entry_modal_button">Löschen</button>
      </div>
    </div>
  </div>
</div>

<script>

  function initOptionButtons() {
    const optionButtons = document.querySelectorAll('.option-button');

    optionButtons.forEach(button => {
      button.addEventListener('click', async function() {
        const entity = this.dataset.entity;
        const id = this.dataset.id;
        const data = this.dataset.data ? JSON.parse(this.dataset.data) : {};

        if (this.classList.contains('delete')) {
          openDeleteModal(entity, id);
        } else {
          openEditModal(entity, id, data);
        }
      });
    });
  }
  
  async function loadList() {
      const res = await fetch('{{ path('api_locations_list')|e('js') }}');

      if (res.ok) {
        const data = await res.json();

        if (!data.length) {
          return;
        }
        
        const list = document.getElementById('entry_list');
        list.innerHTML = '';

        data.forEach(row => {
          const tr = document.createElement('tr');
          
          // Über die Werte im Objekt iterieren
          Object.values(row).forEach(entry => {
            const td = document.createElement('td');
            td.textContent = entry;
            tr.appendChild(td);
          });

          const optionsRow = document.createElement('td');
          optionsRow.innerHTML = `
            <div class="option-buttons-container">
              <button type="button" class="btn btn-primary option-button edit" data-id="${row.id}" data-data='${JSON.stringify(row)}'><i class="fa fa-edit" alt="Edit"></i></button>
              <button type="button" class="btn btn-danger option-button delete" data-id="${row.id}"><i class="fa fa-trash-alt" alt="Delete"></i></button>
            </div>`;

          tr.appendChild(optionsRow);
          
          list.appendChild(tr);
        });
      }

      initOptionButtons();
  }

  openEditModal = async function(entity, id, data) {
    const res = await fetch('{{ path('api_locations_api_entity_schema', { entity: entity }) }}');
    const schema = await res.json();

    const container = document.getElementById('edit_form_field_list');
    container.innerHTML = '';

    for (const [field, info] of Object.entries(schema)) {
      let input;

      if (info.type === 'relation') {
        input = document.createElement('select');
        input.classList.add('form-select');
        input.name = field;
    
        if (info.multiple) {
          input.multiple = true;
        }

        for (const choice of info.choices) {
          const option = document.createElement('option');
          option.value = choice.id;
          option.text = choice.label;

          if (info.multiple && Array.isArray(data[field])) {
            if (data[field].some(selected => selected.id == choice.id)) {
              option.selected = true;
            }
          } else if (!info.multiple && data[field] && data[field].id == choice.id) {
            option.selected = true;
          }

          input.appendChild(option);
        }
      } else {
        input = document.createElement('input');
        input.type = info.type
        input.classList.add('form-control');
        input.name = field;
        input.value = data[field] || '';
      }

      const label = document.createElement('label');
      label.textContent = field.charAt(0).toUpperCase() + field.slice(1);
      label.class = 'form-label';
      label.htmlFor = input.name;

      const wrapper = document.createElement('div');
      wrapper.classList.add('mb-3');
      wrapper.appendChild(label);
      wrapper.appendChild(input);

      container.appendChild(wrapper);
    }

    // Submit handler
    const form = document.getElementById('entry_form');
    form.onsubmit = async (e) => {
      e.preventDefault();

      const formData = new FormData(form);
      const json = formDataToTypedJSON(formData, schema);
      const method = id > 0 ? 'PUT' : 'POST';
      const url = id > 0 ? `/api/{{ entity|lower }}s/${id}` : '/api/{{ entity|lower }}s';

      json['games'] = undefined;
      json['id'] = id;

      await fetch(url, {
        method: method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(json),
      })
      .then(response => {
        return response.json().then(data => {
          if (!response.ok) {
            throw new Error(data.error || 'Unbekannter Fehler');
          }
          return data;
        });
      })
      .then(data => {
          console.log('Erfolgreich angelegt:', data);
          document.getElementById('entry_form').reset();
          bootstrap.Modal.getInstance(document.getElementById('add_entry_modal')).hide();
          loadList();
      })
      .catch(error => {
        document.getElementById('edit_modal_error_container').innerHTML = `<div class="alert alert-danger">Fehler beim Speichern: ${error.message}</div>`;
        alert('Fehler beim Speichern');
      });
    };

    new bootstrap.Modal(document.getElementById('add_entry_modal')).show();
  }

  openDeleteModal = async function(entity, id) {   
    // Submit handler
    const button = document.getElementById('delete_entry_modal_button');
    button.onclick = async (e) => {
      e.preventDefault();

      await fetch(`/api/{{ entity|lower }}s/${id}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: '',
      })
      .then(response => {
        if (response.status === 204) {
          return response;
        }

        throw new Error(data.error || 'Unbekannter Fehler');
      })
      .then(data => {
          bootstrap.Modal.getInstance(document.getElementById('delete_entry_modal')).hide();
          loadList();
      })
      .catch(error => {
        document.getElementById('edit_modal_error_container').innerHTML = `<div class="alert alert-danger">Fehler beim Löschen: ${error.message}</div>`;
        alert('Fehler beim Löschen');
      });
    };

    new bootstrap.Modal(document.getElementById('delete_entry_modal')).show();
  }

  function formDataToTypedJSON(formData, schema) {
    const obj = {};
    for (const [key, info] of Object.entries(schema)) {
      if (info.type === 'relation' && info.multiple) {
        // Mehrfachauswahl
        const values = formData.getAll(key);
        obj[key] = values.map(v => castValue(v, 'number'));
      } else {
        const value = formData.get(key);
        obj[key] = castValue(value, info.type);
      }
    }
    return obj;
  }
    
  function castValue(value, type) {
    if (value === null || value === '') return null;
    switch(type) {
      case 'number':
        const num = Number(value);
        return isNaN(num) ? null : num;
      case 'boolean':
        return value === 'true' || value === '1';
      case 'date':
      case 'datetime':
        // Optional: hier kann man Date-Parsing machen oder ISO-Strings verwenden
        return value;
      default:
        return value;
    }
  }

  document.getElementById('add_entry').addEventListener('click', () => {
    openEditModal('{{ entity }}', 0, []);
  });

  loadList();

</script>

{% endblock %}