{% extends 'base.html.twig' %}

{% block body %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <h1>Videos hochladen</h1>
            
            <div class="card">
                <div class="card-body">
                    <form id="uploadForm" class="needs-validation" novalidate>
                        <div class="mb-3">
                            <label for="gameName" class="form-label">Spielname</label>
                            <input type="text" class="form-control" id="gameName" required>
                            <div class="form-check mt-2">
                                <input type="checkbox" class="form-check-input" id="force-game">
                                <label class="form-check-label" for="force-game">Ordner überschreiben</label>
                            </div>
                        </div>

                        <div id="deviceFolders" class="mb-3">
                            <label class="form-label">Aufnahmegeräte</label>
                            <div class="device-folder">
                                <div class="input-group mb-2">
                                    <input type="text" class="form-control device-name" placeholder="Gerätename" required>
                                    <div class="form-check ms-3 mt-2">
                                        <input type="checkbox" class="form-check-input force-folder" id="force-folder-0">
                                        <label class="form-check-label" for="force-folder-0">Ordner überschreiben</label>
                                    </div>
                                </div>
                                <div class="selected-files mb-3">
                                    <!-- Hier werden die ausgewählten Dateien angezeigt -->
                                </div>
                                <input type="file" class="form-control device-files" multiple accept="video/*" required>
                            </div>
                            <button type="button" class="btn btn-secondary" id="addDevice">
                                <i class="fas fa-plus me-2"></i>Weiteres Gerät
                            </button>
                        </div>

                        <div class="mb-3">
                            <label for="notifyEmails" class="form-label">Benachrichtigungs-Emails</label>
                            <div class="mb-2">
                                <select multiple class="selectpicker system-emails-textarea" data-style="form-select" id="systemEmails">
                                    <option disabled>Verfügbare E-Mail Adressen:</option>
                                    {% for email in systemEmails %}
                                        <option value="{{ email }}">{{ email }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                            <textarea class="form-control" id="notifyEmails" rows="3" 
                                    placeholder="Weitere E-Mail Adressen (eine pro Zeile)"></textarea>
                        </div>

                        <div id="uploadStatus" class="d-none">
                            <h5>Gesamtfortschritt</h5>
                            <div class="progress mb-3">
                                <div class="progress-bar progress-bar-custom w-0" id="totalProgress" role="progressbar">0%</div>
                            </div>
                            
                            <div id="fileProgresses">
                                <!-- Hier werden die einzelnen Datei-Fortschritte eingefügt -->
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary" id="uploadButton">
                            <i class="fas fa-upload me-2"></i>Upload starten
                        </button>
                    </form>
                </div>
            </div>

            <div id="uploadResult" class="mt-3 d-none">
                <div class="alert alert-success">
                    <p>Videos erfolgreich hochgeladen!</p>
                    <a href="#" id="folderLink" target="_blank" class="btn btn-sm btn-outline-success">
                        <i class="fas fa-folder-open me-2"></i>Ordner öffnen
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.getElementById('addDevice').addEventListener('click', () => {
    const template = document.querySelector('.device-folder').cloneNode(true);
    const newIndex = document.querySelectorAll('.device-folder').length;
    
    // Update IDs for new checkbox with unique prefix
    const checkbox = template.querySelector('.force-folder');
    const label = template.querySelector('.form-check-label');
    const newCheckboxId = `force-folder-${newIndex}`;
    checkbox.id = newCheckboxId;
    label.setAttribute('for', newCheckboxId);
    
    // Reset inputs
    template.querySelector('.device-name').value = '';
    template.querySelector('.device-files').value = '';
    template.querySelector('.selected-files').innerHTML = '';
    checkbox.checked = false;
    
    document.querySelector('#deviceFolders').insertBefore(template, document.getElementById('addDevice'));
});

// Funktion zum Erstellen der Dateivorschau
function updateFilesList(filesInput) {
    const deviceFolder = filesInput.closest('.device-folder');
    const filesList = deviceFolder.querySelector('.selected-files');
    
    // Behalte vorhandene Dateien
    const existingFiles = Array.from(filesList.querySelectorAll('.file-item')).map(item => ({
        name: item.querySelector('strong').textContent.trim(),
        size: item.querySelector('.file-size').textContent.trim(),
        forceChecked: item.querySelector('.force-file').checked
    }));
    
    filesList.innerHTML = '<h6 class="mb-3">Ausgewählte Dateien:</h6>';
    
    const allFiles = [...existingFiles, ...Array.from(filesInput.files).map(file => ({
        name: file.name,
        size: (file.size / (1024 * 1024)).toFixed(2) + ' MB',
        forceChecked: false
    }))];

    if (allFiles.length === 0) {
        filesList.innerHTML += '<p class="text-muted">Keine Dateien ausgewählt</p>';
        return;
    }

    const deviceIndex = Array.from(document.querySelectorAll('.device-folder')).indexOf(deviceFolder);
    
    allFiles.forEach((file, index) => {
        const fileDiv = document.createElement('div');
        fileDiv.className = 'file-item d-flex align-items-center p-2 border rounded';
        const checkboxId = `force-file-${deviceIndex}-${index}`;
        
        fileDiv.innerHTML = `
            <div class="flex-grow-1">
                <div class="file-info">
                    <strong class="text-truncate max-width-300" title="${file.name}">
                        ${file.name}
                    </strong>
                    <span class="file-size ms-2">${file.size}</span>
                </div>
            </div>
            <div class="form-check ms-3">
                <input type="checkbox" class="form-check-input force-file" id="${checkboxId}" ${file.forceChecked ? 'checked' : ''}>
                <label class="form-check-label" for="${checkboxId}">Überschreiben</label>
            </div>
        `;
        filesList.appendChild(fileDiv);
    });

    // Füge Zusammenfassung hinzu
    const totalSize = Array.from(filesInput.files)
        .reduce((acc, file) => acc + file.size, 0) / (1024 * 1024);
    
    filesList.insertAdjacentHTML('afterbegin', `
        <div class="alert alert-info mb-3">
            ${allFiles.length} Datei(en) ausgewählt (${totalSize.toFixed(2)} MB gesamt)
        </div>
    `);
}

// Event-Listener für Dateiauswahl
document.addEventListener('change', event => {
    if (event.target.classList.contains('device-files')) {
        updateFilesList(event.target);
    }
});

async function uploadFile(file, folderId, force = false, onProgress) {
    return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        const formData = new FormData();
        
        formData.append('video', file);
        formData.append('folderId', folderId);
        formData.append('force', force);

        xhr.open('POST', '/api/videos/upload-batch', true);
        
        // Zeige den tatsächlichen Upload-Fortschritt
        xhr.upload.onprogress = (e) => {
            if (e.lengthComputable) {
                const percent = (e.loaded / e.total) * 100;
                onProgress(percent, `${Math.round(e.loaded / 1024 / 1024)}MB von ${Math.round(e.total / 1024 / 1024)}MB`);
            }
        };
        
        xhr.onreadystatechange = () => {
            if (xhr.readyState === 4) {
                if (xhr.status >= 200 && xhr.status < 300) {
                    try {
                        const response = JSON.parse(xhr.responseText);
                        if (response.success) {
                            onProgress(100, 'Abgeschlossen');
                            resolve(response);
                        } else {
                            reject(new Error(response.error || 'Upload failed'));
                        }
                    } catch (e) {
                        reject(new Error('Invalid JSON response'));
                    }
                } else {
                    reject(new Error(xhr.statusText || 'Upload failed'));
                }
            }
        };
        
        xhr.onerror = () => reject(new Error('Network error'));
        xhr.onabort = () => reject(new Error('Upload aborted'));
        
        xhr.send(formData);
    });
}

document.getElementById('uploadForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const form = e.target;
    const uploadButton = document.getElementById('uploadButton');
    const uploadStatus = document.getElementById('uploadStatus');
    const fileProgresses = document.getElementById('fileProgresses');
    const totalProgress = document.getElementById('totalProgress');
    let totalFiles = 0;
    let completedFiles = 0;
    let totalUploaded = 0;

    // Disable button at start
    uploadButton.disabled = true;
    uploadButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Upload läuft...';

    const updateTotalProgress = () => {
        const percentage = (totalUploaded / totalFiles) * 100;
        totalProgress.style.width = percentage + '%';
        totalProgress.textContent = `${Math.round(percentage)}% (${totalUploaded}/${totalFiles})`;
    };
    
    uploadStatus.classList.remove('d-none');
    fileProgresses.innerHTML = '';

    // Zähle Gesamtanzahl der Dateien
    document.querySelectorAll('.device-files').forEach(input => {
        totalFiles += input.files.length;
    });

    try {
        // Create game folder
        const gameName = document.getElementById('gameName').value;
        const gameFolder = await fetch('/api/videos/create-folder', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                gameName,
                force: document.getElementById('force-game').checked 
            })
        }).then(r => r.json());

        if (!gameFolder.folderId) throw new Error('Failed to create game folder');

        let allUploadedFiles = [];
        const deviceFolders = document.querySelectorAll('.device-folder');

        for (const deviceFolder of deviceFolders) {
            const deviceName = deviceFolder.querySelector('.device-name').value;
            const files = deviceFolder.querySelector('.device-files').files;
            const fileForceFlags = Array.from(deviceFolder.querySelectorAll('.force-file'))
                .map(checkbox => checkbox.checked);
            const force = deviceFolder.querySelector('.force-folder').checked;
            
            if (!deviceName || !files.length) continue;

            // Create device folder with force option
            const deviceFolderResponse = await fetch('/api/videos/create-device-folder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    parentFolderId: gameFolder.folderId,
                    deviceName,
                    force
                })
            }).then(r => r.json());

            if (!deviceFolderResponse.folderId) continue;

            // Upload files with progress
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                const force = fileForceFlags[i];
                
                const fileProgressDiv = document.createElement('div');
                fileProgressDiv.className = 'mb-3';
                fileProgressDiv.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center mb-1">
                        <div>
                            <small>${file.name}</small>
                            <small class="text-muted progress-status ms-2"></small>
                        </div>
                        <span class="badge bg-info">Warte...</span>
                    </div>
                    <div class="progress upload-progress">
                        <div class="progress-bar progress-bar-custom w-0" role="progressbar"></div>
                    </div>
                `;
                fileProgresses.appendChild(fileProgressDiv);

                const progressBar = fileProgressDiv.querySelector('.progress-bar');
                const progressBadge = fileProgressDiv.querySelector('.badge');
                const progressStatus = fileProgressDiv.querySelector('.progress-status');
                
                try {
                    progressBadge.className = 'badge bg-info';
                    progressBadge.textContent = '0%';
                    
                    const result = await uploadFile(file, deviceFolderResponse.folderId, force, (percent, status) => {
                        progressBar.style.width = `${percent}%`;
                        progressBadge.textContent = `${Math.round(percent)}%`;
                        progressStatus.textContent = status;
                    });
                    
                    if (result.success) {
                        progressBadge.className = 'badge bg-success';
                        progressBadge.textContent = 'Fertig';
                        allUploadedFiles.push(result);
                        totalUploaded++;
                        updateTotalProgress();
                    } else {
                        progressBadge.className = 'badge bg-danger';
                        progressBadge.textContent = 'Fehler';
                    }
                } catch (error) {
                    progressBadge.className = 'badge bg-danger';
                    progressBadge.textContent = 'Fehler';
                    console.error(`Error uploading ${file.name}:`, error);
                }
            }
        }

        // Finale Benachrichtigung für den Hauptordner
        const selectedSystemEmails = Array.from(document.getElementById('systemEmails').selectedOptions)
            .map(option => option.value);
        
        const manualEmails = document.getElementById('notifyEmails').value
            .split('\n')
            .map(email => email.trim())
            .filter(email => email);

        const notifyEmails = [...new Set([...selectedSystemEmails, ...manualEmails])];

        if (notifyEmails.length > 0) {
            const formData = new FormData();
            formData.append('folderId', gameFolder.folderId);
            formData.append('notifyEmails', JSON.stringify(notifyEmails));
            formData.append('uploadedFiles', JSON.stringify(allUploadedFiles));
            
            await fetch('/api/videos/notify', {
                method: 'POST',
                body: formData
            });
        }

        document.getElementById('uploadResult').classList.remove('d-none');
        document.getElementById('folderLink').href = 
            `https://drive.google.com/drive/folders/${gameFolder.folderId}`;
        form.reset();

    } catch (error) {
        alert('Fehler beim Upload: ' + error.message);
    } finally {
        // Re-enable button when done
        uploadButton.disabled = false;
        uploadButton.innerHTML = '<i class="fas fa-upload me-2"></i>Upload starten';
    }
});
</script>
{% endblock %}
