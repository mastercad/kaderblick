name: Deploy to Alfahosting

on:
  push:
    branches: [ main ]

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      release_dir: ${{ steps.set_dir.outputs.release_dir }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Prepare deployment directories
        id: set_dir
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PLESK_HOST }}
          username: ${{ secrets.PLESK_USERNAME }}
          password: ${{ secrets.PLESK_PASSWORD }}
          script: |
            RELEASE_DIR="/var/www/vhosts/byte-artist.de/releases/$(date +%Y%m%d_%H%M%S)"
            echo "::set-output name=release_dir::$RELEASE_DIR"
            echo "release_dir=$RELEASE_DIR" >> $GITHUB_OUTPUT
            mkdir -p $RELEASE_DIR/app
            
            # Aktuelle Konfiguration sichern falls vorhanden
            CURRENT_DIR="/var/www/vhosts/byte-artist.de/kaderblick.byte-artist.de"
            if [ -d "$CURRENT_DIR" ]; then
              [ -f $CURRENT_DIR/app/.env.local ] && cp $CURRENT_DIR/app/.env.local $RELEASE_DIR/app/
              [ -d $CURRENT_DIR/app/config/secrets ] && cp -r $CURRENT_DIR/app/config/secrets $RELEASE_DIR/app/config/
              [ -d $CURRENT_DIR/app/config/jwt ] && cp -r $CURRENT_DIR/app/config/jwt $RELEASE_DIR/app/config/
            fi
            
            chmod -R 755 $RELEASE_DIR

  deploy:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy application files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PLESK_HOST }}
          username: ${{ secrets.PLESK_USERNAME }}
          password: ${{ secrets.PLESK_PASSWORD }}
          source: "docker-compose.yml,.docker/,app/"
          target: ${{ needs.prepare.outputs.release_dir }}
          strip_components: 0
          
      - name: Build and test new release
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PLESK_HOST }}
          username: ${{ secrets.ROOT_USER }}
          password: ${{ secrets.ROOT_PASSWORD }}
          script: |
            RELEASE_DIR=${{ needs.prepare.outputs.release_dir }}
            cd $RELEASE_DIR
            
            # Build in isolation
            docker compose -p staging up -d --build
            
            # Konfiguration und Tests
            docker compose -p staging exec -T api composer install --no-dev --optimize-autoloader
            docker compose -p staging exec -T api bin/console doctrine:migrations:migrate --no-interaction --env=prod
            
            # Wenn alles erfolgreich, dann Symlink aktualisieren
            if [ $? -eq 0 ]; then
              ln -sfn $RELEASE_DIR /var/www/vhosts/byte-artist.de/kaderblick.byte-artist.de
              
              # Alte Container stoppen und neue starten
              docker compose down
              docker compose -p production up -d
              
              # Alte Releases aufr√§umen (behalte die letzten 3)
              cd /var/www/vhosts/byte-artist.de/releases
              ls -t | tail -n +4 | xargs rm -rf
            else
              docker compose -p staging down
              rm -rf $RELEASE_DIR
              exit 1
            fi
