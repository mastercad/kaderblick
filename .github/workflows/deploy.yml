name: Deploy to Alfahosting

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Clean target directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PLESK_HOST }}
          username: ${{ secrets.PLESK_USERNAME }}
          password: ${{ secrets.PLESK_PASSWORD }}
          port: 22
          script: |
            set -e
            echo "Starting cleanup..."
            
            TARGET_DIR="/var/www/vhosts/byte-artist.de/kaderblick.byte-artist.de"
            if [ ! -d "$TARGET_DIR" ]; then
              echo "Target directory does not exist!"
              exit 1
            fi
            
            cd "$TARGET_DIR"
            
            # Backup wichtiger Dateien
            if [ -f app/.env.local ]; then
              cp app/.env.local app/.env.local.backup
              echo "Backup of .env.local created"
            fi
            
            # Bereinigen mit Überprüfung
            for dir in src config migrations templates vendor var/cache var/log; do
              if [ -d "app/$dir" ]; then
                rm -rf "app/$dir"/*
                echo "Cleaned app/$dir"
              fi
            done
            
            # Docker compose check und shutdown
            if command -v docker compose &> /dev/null; then
              docker compose down || echo "Docker compose down failed, continuing..."
            else
              echo "Docker compose not found, skipping container shutdown"
            fi
            
            echo "Cleanup completed successfully"
      
      - name: Deploy fresh files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PLESK_HOST }}
          username: ${{ secrets.PLESK_USERNAME }}
          password: ${{ secrets.PLESK_PASSWORD }}
          source: "docker-compose.yml,.docker/,app/"
          target: "/var/www/vhosts/byte-artist.de/kaderblick.byte-artist.de"
          
      - name: Prepare environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PLESK_HOST }}
          username: ${{ secrets.PLESK_USERNAME }}
          password: ${{ secrets.PLESK_PASSWORD }}
          script: |
            cd /var/www/vhosts/byte-artist.de/kaderblick.byte-artist.de/app
            cp .env.dist .env
            echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> .env            
            
            mkdir -p config/secrets/prod
            echo "<?php return \"${{ secrets.PROD_DECRYPT_KEY }}\"; ?>" > config/secrets/prod/prod.decrypt.private.php

      - name: Start environment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PLESK_HOST }}
          username: ${{ secrets.ROOT_USER }}
          password: ${{ secrets.ROOT_PASSWORD }}
          script: |
            cd /var/www/vhosts/byte-artist.de/kaderblick.byte-artist.de

            # Start containers
            docker compose up -d

            # Install dependencies
            if ! docker compose exec -T api composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev --no-progress; then
              echo "Composer install failed"
              exit 1
            fi

            # Decrypt secrets
            if ! docker compose exec -T api bin/console secrets:decrypt-to-local --force --env=prod; then
              echo "Secrets decrypt failed"
              exit 1
            fi

            # Run migrations with debug output
            if ! docker compose exec -T api bin/console doctrine:migrations:migrate --no-interaction --env=prod --verbose; then
              echo "Migrations failed - checking schema validity"
              docker compose exec -T api bin/console doctrine:schema:validate --env=prod
              exit 1
            fi

            # Generate JWT keys if needed
            if [ ! -f app/config/jwt/private.pem ] || [ ! -f app/config/jwt/public.pem ]; then
              if ! docker compose exec -T api php bin/console lexik:jwt:generate-keypair --overwrite; then
                echo "JWT key generation failed"
                exit 1
              fi
            fi

            # Fix permissions
            docker compose exec -T api chown -R www-data:www-data /var/www/symfony/var
