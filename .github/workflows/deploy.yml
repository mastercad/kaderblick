name: Deploy to AlfahostingMore actions
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - name: prepare Test Env
        run: |
          # prepare database container 

          cp app/.env.dist app/.env
          echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> app/.env
          sed -i 's/^APP_ENV=.*/APP_ENV=test/' app/.env

          docker network inspect kaderblick-net >/dev/null 2>&1 || docker network create kaderblick-net
          
          docker volume inspect kaderblick-data >/dev/null 2>&1 || docker volume create kaderblick-data

          if docker ps --filter "name=kaderblick-db" --filter "status=running" | grep -q kaderblick-db; then
            echo "DB Container läuft"
          else
            docker volume inspect kaderblick-db-data || docker volume create kaderblick-db-data
            docker compose -f docker-compose.db.yml up -d --build --force-recreate db
          fi
          
          # Warte auf DB-Container mit Timeout
          timeout=90
          elapsed=0
          while true; do
            status=`docker inspect -f {{.State.Health.Status}} kaderblick-db`
            
            case "$status" in
              "healthy")
                echo "DB Container ist bereit!"
                break
                ;;
              "unhealthy")
                echo "DB Container ist fehlerhaft - Details:"
                docker logs kaderblick-db
                docker inspect kaderblick-db
                exit 1
                ;;
              "starting")
                if [ "$elapsed" -ge "$timeout" ]; then
                  echo "Container startet zu lange (Timeout nach ${timeout}s) - Details:"
                  docker logs kaderblick-db
                  docker inspect kaderblick-db
                  exit 1
                fi
                ;;
              *)
                echo "Unerwarteter Status '$status' - Details:"
                docker logs kaderblick-db
                docker inspect kaderblick-db
                exit 1
                ;;
            esac
            
            echo "Warte auf DB-Container (${elapsed}/${timeout}s)... Status: $status"
            sleep 2
            elapsed=$((elapsed+2))
          done

          # Test-Datenbank und Rechte erstellen
          docker compose -f docker-compose.db.yml exec -T db mariadb -uroot -proot -e "
            CREATE DATABASE IF NOT EXISTS symfony_test;
            GRANT ALL PRIVILEGES ON symfony_test.* TO 'symfony'@'%';
            FLUSH PRIVILEGES;
          "
          
          docker compose up -d --build --force-recreate api vue-frontend

          docker compose exec -T api composer install

          mkdir -p app/config/secrets/test
          # echo "<?php return \"${{ secrets.DEV_DECRYPT_KEY }}\"; ?>" > app/config/secrets/test/test.decrypt.private.php
          echo '${{ secrets.DEV_DECRYPT_KEY }}' | base64 -d > app/config/secrets/test/test.decrypt.private.php
          chmod 600 app/config/secrets/test/test.decrypt.private.php

          echo "Decrypt secrets"
          docker compose exec -T api bin/console secrets:decrypt-to-local --env=test --force

          mkdir -p "app/config/jwt"

          if [ ! -f app/config/jwt/private.pem ] || [ ! -f app/config/jwt/public.pem ]; then
            docker compose exec -T api php bin/console lexik:jwt:generate-keypair --overwrite
          fi
          
          # Schema erstellen
          # docker compose exec -T api bin/console doctrine:schema:create --env=test

          docker compose exec -T api bin/console doctrine:migrations:migrate --env=test
      - name: run PHP-CS-Fixer
        run: docker compose exec -T api ./vendor/bin/php-cs-fixer --config=.php-cs-fixer.dist.php fix --dry-run --diff --ansi

      - name: run PHP-CS
        run: docker compose exec -T api ./vendor/bin/phpcs

      - name: run PHPStan
        run: docker compose exec -T api ./vendor/bin/phpstan analyse

      - name: run PHPUnit
        run: docker compose exec -T api ./vendor/bin/phpunit

      - name: Generate release directory name
        id: release
        run: echo "dir=/var/www/vhosts/byte-artist.de/kaderblick.byte-artist.de/releases/$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT

      - name: Prepare files
        run: |
          mkdir -p build
          cp -r docker-compose.yml docker-compose.db.yml .docker app build/
          
      - name: Deploy and switch
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PLESK_HOST }}
          username: ${{ secrets.ROOT_USER }}
          password: ${{ secrets.ROOT_PASSWORD }}
          script: |
            set -e
            RELEASE_DIR="${{ steps.release.outputs.dir }}"
            CURRENT_DIR="/var/www/vhosts/byte-artist.de/kaderblick.byte-artist.de"
            
            # Nur prod secrets und jwt kopieren
            mkdir -p "$RELEASE_DIR/app/config/secrets/prod"
            mkdir -p "$RELEASE_DIR/app/config/jwt"
            
            if [ -d "$CURRENT_DIR" ]; then
              [ -d "$CURRENT_DIR/app/config/secrets/prod" ] && \
                cp -r "$CURRENT_DIR/app/config/secrets/prod/"* "$RELEASE_DIR/app/config/secrets/prod/"
              
              [ -d "$CURRENT_DIR/app/config/jwt" ] && \
                cp -r "$CURRENT_DIR/app/config/jwt/"* "$RELEASE_DIR/app/config/jwt/"
            fi
            
            chmod -R 755 "$RELEASE_DIR"
            chown -R kaderblick-ftp-admin:psacln "$RELEASE_DIR"

      - name: Copy files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PLESK_HOST }}
          username: ${{ secrets.PLESK_USERNAME }}
          password: ${{ secrets.PLESK_PASSWORD }}
          source: "build/*"
          target: "${{ steps.release.outputs.dir }}"
          strip_components: 1

      - name: Activate release
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PLESK_HOST }}
          username: ${{ secrets.ROOT_USER }}
          password: ${{ secrets.ROOT_PASSWORD }}
          script: |
            set -e
            RELEASE_DIR="${{ steps.release.outputs.dir }}"
            CURRENT_DIR=/var/www/vhosts/byte-artist.de/kaderblick.byte-artist.de/current
            cd "$RELEASE_DIR"

            # erstelle im bedarfsfall netzwerk
            docker network inspect kaderblick-net >/dev/null 2>&1 || docker network create kaderblick-net
            
            docker volume inspect kaderblick-data >/dev/null 2>&1 || docker volume create kaderblick-data

            # baue und starte im bedarfsfall db container
            if docker ps --filter "name=kaderblick-db" --filter "status=running" | grep -q kaderblick-db; then
              echo "DB Container läuft"
            else
              docker volume inspect kaderblick-db-data || docker volume create kaderblick-db-data
              docker compose -f docker-compose.db.yml -p production up -d --build --force-recreate db
            fi
            
            # Alte Staging-Container stoppen und entfernen
            echo "Stoppe und entferne alten staging"
            docker compose -p staging down --remove-orphans api vue-frontend
            
            cp app/.env.dist app/.env
            echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> app/.env

            # Nur prod secrets und jwt kopieren
            #            mkdir -p "$RELEASE_DIR/app/config/secrets/prod"
            #            mkdir -p "$RELEASE_DIR/app/config/jwt"
            
            # ich bin mir ehrlich gesagt gerade gar nicht mehr sicher, ob das hier noch so sinn macht, die kommen ja immer mit dem branch aktuell rein
            if [ -d "$CURRENT_DIR" ]; then
              if [ -d "$CURRENT_DIR/app/config/secrets/prod" ]; then
                mkdir -p "$RELEASE_DIR/app/config/secrets/prod"
                cp -r "$CURRENT_DIR/app/config/secrets/prod/"* "$RELEASE_DIR/app/config/secrets/prod/" 2>/dev/null || true
              fi

              if [ -d "$CURRENT_DIR/app/config/jwt" ]; then
                mkdir -p "$RELEASE_DIR/app/config/jwt"
                cp -r "$CURRENT_DIR/app/config/jwt/"* "$RELEASE_DIR/app/config/jwt/" 2>/dev/null || true
              fi
            fi
            
            chmod -R 755 "$RELEASE_DIR"

            mkdir -p app/config/secrets/prod
            # echo "<?php return \"${{ secrets.PROD_DECRYPT_KEY }}\"; ?>" > app/config/secrets/prod/prod.decrypt.private.php
            echo '${{ secrets.PROD_DECRYPT_KEY }}' | base64 -d > app/config/secrets/prod/prod.decrypt.private.php
            chmod 600 app/config/secrets/prod/prod.decrypt.private.php

            # Build und Test mit uniquen Container-Namen
            echo "Starte neuen Staging für vorbereitungen"
            PMA_PORT=18081 API_PORT=18000 VUE_PORT=18080 docker compose -p staging up -d --build --force-recreate api vue-frontend
            
            echo "Starte composer install"
            docker compose -p staging exec -T api composer install --no-dev --optimize-autoloader

            echo "Decrypt secrets"
            docker compose -p staging exec -T api bin/console secrets:decrypt-to-local --force --env=prod

            echo "Erstelle jwt, wenn nötig"
            if [ ! -f app/config/jwt/private.pem ] || [ ! -f app/config/jwt/public.pem ]; then
              docker compose -p staging exec -T api php bin/console lexik:jwt:generate-keypair --overwrite
            fi

            echo "Starte migrations"
            docker compose -p staging exec -T api bin/console doctrine:migrations:migrate --no-interaction --env=prod

            # Vor Aktivierung alte Production-Container stoppen
            echo "Stoppe aktuelle production"
            docker compose -p production down --remove-orphans api vue-frontend

            # Aktivierung
            echo "Verlinke aktuellen Release ordner mit current"
            ln -sfn "$RELEASE_DIR" "$CURRENT_DIR"
            
            echo "Setze Rechte für current"
            chmod -R 777 $CURRENT_DIR/app/var

            # Neue Production starten
            echo "gehe in current"
            cd $CURRENT_DIR

            echo "starte production"
            docker compose -p production up -d --force-recreate api vue-frontend

            docker compose -p staging down api vue-frontend
            docker compose -p staging rm api vue-frontend

            # Cleanup
            cd ../releases && ls -t | tail -n +4 | xargs rm -rf